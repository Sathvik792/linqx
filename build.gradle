
buildscript {
    dependencies {
        classpath 'gradle.plugin.com.palantir.gradle.docker:gradle-docker:0.13.0'
    }
}

plugins {
    id 'org.springframework.boot' version '2.2.9.RELEASE'
    id 'java'
    id 'jacoco'
}

apply plugin: 'io.spring.dependency-management'
apply plugin: 'com.palantir.docker'

group = 'fracproops.azurecr.io'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'

repositories {
    mavenCentral()
}

ext {
    set('springCloudVersion', 'Hoxton.RELEASE')
}

dependencies {
    implementation 'io.micrometer:micrometer-registry-prometheus'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-web'

    implementation 'org.springframework.cloud:spring-cloud-config-client'
    implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'
    implementation 'org.springframework.cloud:spring-cloud-starter-netflix-hystrix'
    implementation 'org.springframework.cloud:spring-cloud-stream'
    implementation 'org.springframework.cloud:spring-cloud-starter-stream-kafka'

    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'io.springfox:springfox-swagger2:2.9.2'
    implementation 'io.springfox:springfox-swagger-ui:2.9.2'

    implementation 'org.springframework.security.oauth.boot:spring-security-oauth2-autoconfigure'
    implementation 'org.springframework.cloud:spring-cloud-starter-sleuth'
    implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
     testImplementation 'org.mockito:mockito-junit-jupiter:3.12.4'
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

// Fix for "command line too long" on Windows (use Jar manifest instead of classpath on command line)
bootJar {
    launchScript()
}

jar {
    manifest {
        attributes(
                'Class-Path': configurations.runtimeClasspath.files.collect { it.toURI().toURL().toString() }.join(' ')
        )
    }
}

task unpack(type: Copy) {
    dependsOn bootJar
    from(zipTree(tasks.bootJar.outputs.files.singleFile))
    into("$buildDir/dependency")
}

docker {
    name "${project.group}/${bootJar.baseName}"
    files 'run.sh'
    copySpec.from(tasks.unpack.outputs).into(".")
    copySpec.from(tasks.bootJar.outputs.files.singleFile).into(".")
    buildArgs(['JAR_FILE': "$bootJar.archiveName"])
}

jacoco {
    toolVersion = "0.8.7"
}

test {
    useJUnitPlatform()
    jacoco {
        enabled = true
        destinationFile = file("$buildDir/jacoco/jacocoTest.exec")
    }
    // Optional: to avoid long command line args on test classpath (same issue)
    systemProperty 'java.awt.headless', 'true'
}

// Generate coverage reports after test
jacocoTestReport {
    dependsOn test
    reports {
        xml.required = true
        csv.required = false
        html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
    }
}

check.dependsOn jacocoTestReport
